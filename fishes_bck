const int MAX_LOOP = 1*2*3*4*5*6*7*8*9*10;
int loops = 0;

String zeFish;

//-----------------------------------------------------------------------------------//
//--------------------------------------| LEDS |-------------------------------------//
//-----------------------------------------------------------------------------------//

#include <FastLED.h>
FASTLED_USING_NAMESPACE 
//The FASTLED_USING_NAMESPACE macro will allow your code to work in environments where 
//FastLED is using a namespace vs. places where it isn't. Also, the name of the namespace isn't finalized.

#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))
// #if defined(FASTLED_VERSION) && (FASTLED_VERSION < 3001000)
// #warning "Requires FastLED 3.1 or later; check github for latest code."
// #endif

#define DATA_PIN    6
//#define CLK_PIN   4
#define LED_TYPE    WS2811
#define COLOR_ORDER GRB
#define NUM_LEDS    151

#define BRIGHTNESS          200
#define FRAMES_PER_SECOND  60


class Leds {
    
    CRGB leds[NUM_LEDS];

    // List of patterns to cycle through.  Each is defined as a separate function below.
    typedef void (*SimplePatternList[])();
    SimplePatternList gPatterns = { rainbow, rainbowWithGlitter, confetti, sinelon, juggle, bpm };
    
    uint8_t gCurrentPatternNumber = 0; // Index number of which pattern is current
    uint8_t gHue = 0; // rotating "base color" used by many of the patterns

    public:
        Leds() {
        }

        void setup() {
            // tell FastLED about the LED strip configuration
            FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
            //FastLED.addLeds<LED_TYPE,DATA_PIN,CLK_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);
            
            // set master brightness control
            FastLED.setBrightness(BRIGHTNESS);
        }
        
        void loop() {
          // Call the current pattern function once, updating the 'leds' array
          this->gPatterns[gCurrentPatternNumber]();
        
          // send the 'leds' array out to the actual LED strip
          FastLED.show();  
          // insert a delay to keep the framerate modest
          FastLED.delay(1000/FRAMES_PER_SECOND); 
        
          // do some periodic updates
          EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the "base color" through the rainbow
          EVERY_N_SECONDS( 10 ) { nextPattern(); } // change patterns periodically

        }

        void nextPattern()
        {
          // add one to the current pattern number, and wrap around at the end
          gCurrentPatternNumber = (gCurrentPatternNumber + 1) % ARRAY_SIZE( gPatterns);
        }
        
        void rainbow() 
        {
          // FastLED's built-in rainbow generator
          fill_rainbow( leds, NUM_LEDS, gHue, 7);
        }
        
        void rainbowWithGlitter() 
        {
          // built-in FastLED rainbow, plus some random sparkly glitter
          rainbow();
          addGlitter(80);
        }
        
        void addGlitter( fract8 chanceOfGlitter) 
        {
          if( random8() < chanceOfGlitter) {
            leds[ random16(NUM_LEDS) ] += CRGB::White;
          }
        }
        
        void confetti() 
        {
          // random colored speckles that blink in and fade smoothly
          fadeToBlackBy( leds, NUM_LEDS, 10);
          int pos = random16(NUM_LEDS);
          leds[pos] += CHSV( gHue + random8(64), 200, 255);
        }
        
        void sinelon()
        {
          // a colored dot sweeping back and forth, with fading trails
          fadeToBlackBy( leds, NUM_LEDS, 20);
          int pos = beatsin16( 13, 0, NUM_LEDS-1 );
          leds[pos] += CHSV( gHue, 255, 192);
        }
        
        void bpm()
        {
          // colored stripes pulsing at a defined Beats-Per-Minute (BPM)
          uint8_t BeatsPerMinute = 62;
          CRGBPalette16 palette = PartyColors_p;
          uint8_t beat = beatsin8( BeatsPerMinute, 64, 255);
          for( int i = 0; i < NUM_LEDS; i++) { //9948
            leds[i] = ColorFromPalette(palette, gHue+(i*2), beat-gHue+(i*10));
          }
        }
        
        void juggle() {
          // eight colored dots, weaving in and out of sync with each other
          fadeToBlackBy( leds, NUM_LEDS, 20);
          byte dothue = 0;
          for( int i = 0; i < 8; i++) {
            leds[beatsin16( i+7, 0, NUM_LEDS-1 )] |= CHSV(dothue, 200, 255);
            dothue += 32;
          }
        }
        

};

//-----------------------------------------------------------------------------------//
//--------------------------------------| FANS |-------------------------------------//
//-----------------------------------------------------------------------------------//

class Fans {
    int pin;

    public:
        Fans(int fansPin) {
            pin = fansPin;
        }

        void setup() {
          pinMode(pin, OUTPUT);
        }
        
        void relax() {
            // say("Fans off");
            digitalWrite(pin, LOW);
        }
        
        void blow() {
            // say("Fans on");
            digitalWrite(pin, HIGH);
        }

};

//-----------------------------------------------------------------------------------//
//-------------------------------------| LIGHTS |------------------------------------//
//-----------------------------------------------------------------------------------//

class Lights {
    int pin1;
    int pin2;
    int pin3;

    public:
        Lights(int _pin1, int _pin2, int _pin3) {
            pin1 = _pin1;
            pin2 = _pin2;
            pin3 = _pin3;
        }

        void setup() {
          pinMode(pin1, OUTPUT);
          pinMode(pin2, OUTPUT);
          pinMode(pin3, OUTPUT);
        }
        
        void on() {
            // say("Lights on");
            digitalWrite(pin1, HIGH);
            digitalWrite(pin2, HIGH);
            digitalWrite(pin3, HIGH);
        }
        
        void off() {
            // say("Lights off");
            digitalWrite(pin1, LOW);
            digitalWrite(pin2, LOW);
            digitalWrite(pin3, LOW);
        }
        
        void dance(int loops) {
            // String str = ("Dancing! ");
            // str += loops;
            // say(str);
            digitalWrite(pin1, ((loops % 3) == 0));
            digitalWrite(pin2, ((loops % 3) == 1));
            digitalWrite(pin3, ((loops % 3) == 2));
        }

};


//-----------------------------------------------------------------------------------//
//-------------------------------------| ENGINE |------------------------------------//
//-----------------------------------------------------------------------------------//

class Engine {
    // int rpmPin;
    int pwmPin;
    
    int curPwm = 0;
    int targetPwm = 0;
    // const int maxRpm = 60; //the maximum wanted RPM
    // const int maxPwm = 150; //the pwm signal that generates the maxRpm

    // const int pwmStep = 1; //the "jumps" in pwm signal to generate the spin
    
    public:
        Engine(int _pwmPin) {
            pwmPin = _pwmPin;
            // rpmPin = _rpmPin;
        }

        void setup() {
          pinMode(pwmPin, OUTPUT);
        //   pinMode(rpmPin, INPUT);
        }
        
        // int getRpm() {
            // return analogRead(rpmPin);
            //todo - calc rpm by somthing...
        // }
        
        // void spinAt(int rpm) {

        //     rpm = min(maxRpm, rpm);

        //     say("Spinning at: " + (String)rpm);
        //     const int curRpm = this->getRpm();
        //     const int diffRpm = rpm - curRpm;
        //     if (diffRpm > 0) {
        //         curPwm += pwmStep;    
        //     } else if (diffRpm < 0) {
        //         curPwm -= pwmStep;
        //     }
        //     curPwm = max(0, curPwm);
        //     curPwm = min(maxPwm, curPwm);

        //     say("Engine RPM is: " + (String)curRpm);
        //     say("Engine PWM is: " + (String)curPwm);
            
        //     analogWrite(pwmPin, curPwm);
        // }

        // void spinAt(int value) {
            
            
        //     say("Spinning value: " + (String)value);

        //     if ((loops % 8) == 0) {
        //         //step up / down every 2 seconds
        //         if (engValue < value) {
        //             engValue++;
        //         } else if (engVAlue > value) {
        //             engValue--;
        //         }
        //     }
        //     // engValue = map(percentage, 0, 100, 0, 10);

        //     // say("Spinning pwm: " + (String)engValue);

        //     // engValue = 
        //     // analogWrite(pwmPin, curPwm);
        // }
        
        
        void spinAt(int percentage) {
            
            say("Spinning percent: " + (String)percentage);

            targetPwm = map(percentage, 0, 100, 0, 255);

            say("Spinning for pwm: " + (String)targetPwm);

            if ((loops % 2) == 0) {
                if (targetPwm > curPwm) {
                    curPwm++;
                } else if (targetPwm < curPwm) {
                    curPwm--;
                }
            }
            
            analogWrite(pwmPin, curPwm);
        }
        
        void slow() {
            this->spinAt(1);
        }
        
        void fast() {
            this->spinAt(5);
        }
        
};

//-----------------------------------------------------------------------------------//
//--------------------------------------| RF |-------------------------------------//
//-----------------------------------------------------------------------------------//
#include <RCSwitch.h>

class RF {
    int pin;

    unsigned int data = 0;   // variable used to store received data
    unsigned int loops = 0;
    const unsigned int upperThreshold = 70;  //upper threshold value
    const unsigned int lowerThreshold = 50;  //lower threshold value
    
    RCSwitch rfSwitch = RCSwitch();
    
    public:
        RF(int rfPin) {
            pin = rfPin;
        }

        void setup() {
            rfSwitch.enableReceive(pin);  // Receiver on interrupt 0 => that is pin #2
        }

                
        void clear() {
            if (rfSwitch.available()) {
                rfSwitch.resetAvailable();
            }
        }
                
        String receive() {
            if (rfSwitch.available()) {
                const String val = (String)rfSwitch.getReceivedValue();
                say("Received Fish #" + val);
                rfSwitch.resetAvailable();
                return val;
            } else {
                return "";
            }
        }
                
        String mockReceive() {
            if (random(0, 20) <= 1) {
                say("Simulating Fish #2");
                return ("2");
            } else {
                return "";
            }

        }
};

//-----------------------------------------------------------------------------------//
//--------------------------------------| MUSIC |-------------------------------------//
//-----------------------------------------------------------------------------------//

class Music {
    public:
    
        String curStatus = "WAITING";
        
        const int minPlayTime = 1000 * 3; //minimum play time for music (used to let the system adjust)
        int lastPlayStart = 0;
        int lastIdleStart = 0;
        
        Music() {
        }

        void setup() {

        }

                
        void play(String set) {
            lastPlayStart = millis();
            String str = "![PLAY ";
            str += set;
            str += "]";
            Serial.println(str);
        }
                
        void stop() {
            lastPlayStart = 0;
            String str = "![STOP]";
            Serial.println(str);
        }
                
        void idle() {
            lastIdleStart = millis();
            String str = "![IDLE]";
            Serial.println(str);
        }
        
        String setStatus() {
            
            String status = "";

            Serial.setTimeout(50);
            status = (String)Serial.readString();
            // say("Music status is: ");
            // say(status);
            if (status.indexOf("PLAYING") >= 0) {
                curStatus = "PLAYING";
                say("Current Status is: " + curStatus);
            } else if (status.indexOf("WAITING") >= 0) {
                curStatus = "WAITING";
                say("Current Status is: " + curStatus);
            }
            return status;
        }

        bool isPlaying() {
            if ((millis() - lastPlayStart) < minPlayTime) { // is in min play time
                return true;
            } else if ((millis() - lastIdleStart) < minPlayTime) { // is in min idle time
                return false;
            } else {
                this->setStatus();
                const bool isPlaying = curStatus != "WAITING";
                return isPlaying;
            }
        }
};

//-----------------------------------------------------------------------------------//
//--------------------------------------| MAIN |-------------------------------------//
//-----------------------------------------------------------------------------------//

RF      rf      = RF(A0); //A0 is the rf listener pin
Leds    leds    = Leds(); //fixed on D6 pin
Fans    fans    = Fans(0); //D0 is the fans switch
Music   music   = Music();
Lights  lights  = Lights(1,2,3); //three lights on pins D2, D2, D3
Engine  engine  = Engine(A5);

void setup(){
    
    // WiFi.off();

    rf.setup();
    fans.setup();
    music.setup();
    lights.setup();
    engine.setup();
}


void loop() {
    
    if (music.isPlaying()) {
        // say("Music still playing...");
        rf.clear();
        fans.blow();
        lights.dance(loops);
        engine.fast();
        leds.loop();
    } else {
        zeFish = rf.receive();
        if (zeFish.length() > 0) {
            music.play(zeFish);
            fans.blow();
            lights.dance(loops);
            engine.fast();
            leds.loop();
        } else {
            // say("No fishes...");
            music.idle();
            fans.relax();
            lights.off();
            engine.slow();
        }
    }
    
    loops = (loops + 1) % MAX_LOOP;
    delay(200);
}

void say(String toSay) {
    Serial.println("<Arduino> " + toSay);
    delay(10);
}


